AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  AdminEmail:
    Type: String
    Description: Email for SNS notifications
  DomainName:
    Type: String
    Default: status.gamelab.cl
    Description: Custom domain name
  CertificateArn:
    Type: String
    Description: ACM certificate ARN for the domain (must be in us-east-1)

Resources:
  # DynamoDB Tables
  ServersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: servers
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  StatusTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: server-status
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: serverId
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: N
      KeySchema:
        - AttributeName: serverId
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE

  # SNS Topic
  AlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: server-alerts
      Subscription:
        - Protocol: email
          Endpoint: !Ref AdminEmail

  # S3 Bucket for static website
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-website"
      WebsiteConfiguration:
        IndexDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub "${WebsiteBucket}/*"

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref DomainName
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt WebsiteBucket.DomainName
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only
          - Id: APIOrigin
            DomainName: !Sub "${ServerApi}.execute-api.${AWS::Region}.amazonaws.com"
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD]
          CachedMethods: [GET, HEAD]
          ForwardedValues:
            QueryString: false
        CacheBehaviors:
          - PathPattern: "/api/*"
            TargetOriginId: APIOrigin
            ViewerProtocolPolicy: https-only
            AllowedMethods: [DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT]
            CachedMethods: [GET, HEAD]
            ForwardedValues:
              QueryString: true
              Headers: ["*"]
        Enabled: true
        DefaultRootObject: index.html

  # Lambda Functions
  PingFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: server-ping
      CodeUri: src/
      Handler: ping.handler
      Runtime: nodejs18.x
      Environment:
        Variables:
          SERVERS_TABLE: !Ref ServersTable
          STATUS_TABLE: !Ref StatusTable
          SNS_TOPIC: !Ref AlertTopic
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ServersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref StatusTable
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt AlertTopic.TopicName
      Events:
        ScheduleEvent:
          Type: Schedule
          Properties:
            Schedule: rate(5 minutes)

  ApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: server-api
      CodeUri: src/
      Handler: api.handler
      Runtime: nodejs18.x
      Environment:
        Variables:
          SERVERS_TABLE: !Ref ServersTable
          STATUS_TABLE: !Ref StatusTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ServersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref StatusTable

  ServerApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      DefinitionBody:
        openapi: 3.0.1
        paths:
          /servers:
            get:
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiFunction.Arn}/invocations"
            post:
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiFunction.Arn}/invocations"
          /servers/{id}:
            delete:
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiFunction.Arn}/invocations"
          /status:
            get:
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiFunction.Arn}/invocations"
          /history/{id}:
            get:
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiFunction.Arn}/invocations"

  ApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ApiFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "${ServerApi}/*/*"

Outputs:
  WebsiteURL:
    Description: Custom domain URL
    Value: !Sub "https://${DomainName}"
  CloudFrontURL:
    Description: CloudFront URL
    Value: !Sub "https://${CloudFrontDistribution.DomainName}"
  ApiURL:
    Description: API Gateway URL
    Value: !Sub "https://${ServerApi}.execute-api.${AWS::Region}.amazonaws.com/prod"